Marcado moderno
La etiqueta <script> tiene algunos atributos que rara vez se usan en la actualidad, pero aún se pueden encontrar en código antiguo:

El atributo type: <script type=…>
El antiguo estándar HTML, HTML4, requería que un script tuviera un type. Por lo general, era type="text/javascript". Ya no es necesario. Además, el estándar HTML moderno cambió totalmente el significado de este atributo. Ahora, se puede utilizar para módulos de JavaScript. Pero eso es un tema avanzado, hablaremos sobre módulos en otra parte del tutorial.

El atributo language: <script language=…>
Este atributo estaba destinado a mostrar el lenguaje del script. Este atributo ya no tiene sentido porque JavaScript es el lenguaje predeterminado. No hay necesidad de usarlo.

Comentarios antes y después de los scripts.
En libros y guías muy antiguos, puedes encontrar comentarios dentro de las etiquetas <script>, como el siguiente:

<script type="text/javascript"><!--
    ...
//--></script>

-------------------------------------------------------------------------------------------------------------------------------------

Como regla general, solo los scripts más simples se colocan en el HTML. Los más complejos residen en archivos separados.

La ventaja de un archivo separado es que el navegador lo descargará y lo almacenará en caché.

Otras páginas que hacen referencia al mismo script lo tomarán del caché en lugar de descargarlo, por lo que el archivo solo se descarga una vez.

Eso reduce el tráfico y hace que las páginas sean más rápidas.

<script src="file.js">
  alert(1); // el contenido se ignora porque se estableció src
</script>
Debemos elegir un <script src="…"> externo o un <script> normal con código.

El ejemplo anterior se puede dividir en dos scripts para que funcione:

<script src="file.js"></script>
<script>
  alert(1);
</script>

-------------------------------------------------------------------------------------------------------------------------------------

Nombramiento de variables
Existen dos limitaciones de nombre de variables en JavaScript:

El nombre únicamente puede incluir letras, dígitos, o los símbolos $ y _.
El primer carácter no puede ser un dígito.
Ejemplos de nombres válidos:

let userName;
let test123;
Cuando el nombre contiene varias palabras, se suele usar el estilo camelCase (capitalización en camello), donde las palabras van pegadas una detrás de otra, con cada inicial en mayúscula: miNombreMuyLargo.

Es interesante notar que el símbolo del dólar '$' y el guion bajo '_' también se utilizan en nombres. Son símbolos comunes, tal como las letras, sin ningún significado especial.

Los siguientes nombres son válidos:

let $ = 1; // Declara una variable con el nombre "$"
let _ = 2; // y ahora una variable con el nombre "_"

alert($ + _); // 3
Ejemplos de nombres incorrectos:

let 1a; // no puede iniciar con un dígito

let my-name; // los guiones '-' no son permitidos en nombres

-------------------------------------------------------------------------------------------------------------------------------------

La Capitalización es Importante
Dos variables con nombres manzana y MANZANA son variables distintas.

Las letras que no son del alfabeto inglés están permitidas, pero no se recomiendan
Es posible utilizar letras de cualquier alfabeto, incluyendo letras del cirílico, logogramas chinos, etc.:

let имя = '...';
let 我 = '...';
Técnicamente, no existe ningún error aquí. Tales nombres están permitidos, pero existe una tradición internacional de utilizar inglés en el nombramiento de variables. Incluso si estamos escribiendo un script pequeño, este puede tener una larga vida por delante. Puede ser necesario que gente de otros países deba leerlo en algún momento.

-------------------------------------------------------------------------------------------------------------------------------------

Nombres reservados
Hay una lista de palabras reservadas, las cuales no pueden ser utilizadas como nombre de variable porque el lenguaje en sí las utiliza.

Por ejemplo: let, class, return, y function están reservadas.

El siguiente código nos da un error de sintaxis:

let let = 5; // no se puede le nombrar "let" a una variable  ¡Error!
let return = 5; // tampoco se le puede nombrar "return", ¡Error!
Una asignación sin utilizar use strict
Normalmente, debemos definir una variable antes de utilizarla. Pero, en los viejos tiempos, era técnicamente posible crear una variable simplemente asignando un valor sin utilizar ‘let’. Esto aún funciona si no ponemos ‘use strict’ en nuestros scripts para mantener la compatibilidad con scripts antiguos.

// nota: no se utiliza "use strict" en este ejemplo

num = 5; // se crea la variable "num" si no existe antes

alert(num); // 5
Esto es una mala práctica que causaría errores en ‘strict mode’:

"use strict";

num = 5; // error: num no está definida

-------------------------------------------------------------------------------------------------------------------------------------

Constantes
Para declarar una variable constante (inmutable) use const en vez de let:

const myBirthday = '18.04.1982';
Las variables declaradas utilizando const se llaman “constantes”. No pueden ser alteradas. Al intentarlo causaría un error:

const myBirthday = '18.04.1982';

myBirthday = '01.01.2001'; // ¡error, no se puede reasignar la constante!

Cuando un programador está seguro de que una variable nunca cambiará, puede declarar la variable con const para garantizar y comunicar claramente este hecho a todos.

Constantes mayúsculas
Existe una práctica utilizada ampliamente de utilizar constantes como aliases de valores difíciles-de-recordar y que se conocen previo a la ejecución.

Tales constantes se nombran utilizando letras mayúsculas y guiones bajos.

Por ejemplo, creemos constantes para los colores en el formato “web” (hexadecimal):

const COLOR_RED = "#F00";
const COLOR_GREEN = "#0F0";
const COLOR_BLUE = "#00F";
const COLOR_ORANGE = "#FF7F00";

// ...cuando debemos elegir un color
let color = COLOR_ORANGE;
alert(color); // #FF7F00

Ventajas:

COLOR_ORANGE es mucho más fácil de recordar que "#FF7F00".
Es mucho más fácil escribir mal "#FF7F00" que COLOR_ORANGE.
Al leer el código, COLOR_ORANGE tiene mucho más significado que #FF7F00.

¿Constantes en mayúsculas o en minúsculas?

const BIRTHDAY = '18.04.1982';

const age = someCode(birthday);

Generalmente usamos mayúsculas para constantes que están “hard-codeadas”. En otras palabras, cuando el valor se conoce antes de la ejecución y se escribe directamente en el código.

En este código, birthday es exactamente así, por lo que podemos escribirla en mayúsculas.

En cambio, age es evaluada en ejecución. Hoy tenemos una edad, un año después tendremos otra. Es constante en el sentido que no cambia durante la ejecución del código, pero es un poco “menos constante” que birthday ya que se calcula a partir de esta otra constante, por lo que debemos mantenerla en minúscula.

-------------------------------------------------------------------------------------------------------------------------------------

String
Un string en JavaScript es una cadena de caracteres y debe colocarse entre comillas.

let str = "Hola";
let str2 = 'Las comillas simples también están bien';
let phrase = `se puede incrustar otro ${str}`;
En JavaScript, hay 3 tipos de comillas.

Comillas dobles: "Hola".
Comillas simples: 'Hola'.
Backticks (comillas invertidas): `Hola`.

Las comillas dobles y simples son comillas “sencillas” (es decir, funcionan igual). No hay diferencia entre ellas en JavaScript.

Los backticks son comillas de “funcionalidad extendida”. Nos permiten incrustar variables y expresiones en una cadena de caracteres encerrándolas en ${...}, por ejemplo:

let name = "John";

// incrustar una variable
alert( `Hola, ${name}!` ); // Hola, John!

// incrustar una expresión
alert( `el resultado es ${1 + 2}` ); //el resultado es 3

-------------------------------------------------------------------------------------------------------------------------------------

ToNumber
La conversión numérica ocurre automáticamente en funciones matemáticas y expresiones.

Por ejemplo, cuando se dividen valores no numéricos usando /:

alert( "6" / "2" ); // 3, los strings son convertidos a números
Podemos usar la función Number(value) para convertir de forma explícita un valor a un número:

let str = "123";
alert(typeof str); // string

let num = Number(str); // se convierte en 123

alert(typeof num); // number

-------------------------------------------------------------------------------------------------------------------------------------

Matemáticas: Operadores que están soportados en las siguientes operaciones:

Suma +,
Resta -,
Multiplicación *,
División /,
Resto %,
Exponenciación **.
Los primeros cuatro son conocidos mientras que % y ** deben ser explicados más ampliamente.

Resto %
El operador resto %, a pesar de su apariencia, no está relacionado con porcentajes.

El resultado de a % b es el resto de la división entera de a por b.

Por ejemplo:

alert( 5 % 2 ); // 1, es el resto de 5 dividido por 2
alert( 8 % 3 ); // 2, es el resto de 8 dividido por 3
alert( 8 % 4 ); // 0, es el resto de 8 dividido por 4

Exponenciación **
El operador exponenciación a ** b eleva a a la potencia de b.

En matemáticas de la escuela, lo escribimos como ab.

Por ejemplo:

alert( 2 ** 2 ); // 2² = 4
alert( 2 ** 3 ); // 2³ = 8
alert( 2 ** 4 ); // 2⁴ = 16

-------------------------------------------------------------------------------------------------------------------------------------

Concatenación de cadenas con el binario +
Características de los operadores de JavaScript que van más allá de la aritmética escolar.

Normalmente el operador + suma números.

Pero si se aplica el + binario a una cadena, los une (concatena):

let s = "my" + "string";
alert(s); // mystring
Hay que tener presente que si uno de los operandos es una cadena, el otro es convertido a una cadena también.

Por ejemplo:

alert( '1' + 2 ); // "12"
alert( 2 + '1' ); // "21"
Como se ve, no importa si el primer operando es una cadena o el segundo.

Aquí hay un ejemplo algo más complejo:

alert(2 + 2 + '1' ); // Sería "41" y no "221"
Aquí, los operadores trabajan uno después de otro. El primer + suma dos números entonces devuelve 4, luego el siguiente + le agrega la cadena 1, así que se evalúa como 4 + '1' = 41.

alert('1' + 2 + 2); // "122", no es "14"
Aquí el primer operando es una cadena, el compilador trata los otros dos operandos como cadenas también. El 2 es concatenado a '1', entonces es como '1' + 2 = "12" y "12" + 2 = "122".

El binario + es el único operador que soporta cadenas en esa forma. Otros operadores matemáticos trabajan solamente con números y siempre convierten sus operandos a números.

Por ejemplo, resta y división:

alert( 2 - '1' ); // 1
alert( '6' / '2' ); // 3

-------------------------------------------------------------------------------------------------------------------------------------

Esta notación puede ser acortada utilizando los operadores += y *=:

let n = 2;
n += 5; // ahora n = 7  (es lo mismo que n = n + 5)
n *= 2; // ahora n = 14 (es lo mismo que n = n * 2)

alert( n ); // 14
Los operadores cortos “modifica y asigna” existen para todos los operadores aritméticos y de nivel bit: /=, -=, etcétera.

Tales operadores tienen la misma precedencia que la asignación normal, por lo tanto se ejecutan después de otros cálculos:

let n = 2;

n *= 3 + 5; // el lado derecho es evaluado primero, es lo mismo que n *= 8

alert( n ); // 16

-------------------------------------------------------------------------------------------------------------------------------------

Igualdad estricta
Una comparación regular de igualdad == tiene un problema. No puede diferenciar 0 de `falso’:

alert( 0 == false ); // true

Lo mismo sucede con una cadena vacía:

alert( '' == false ); // true

Esto sucede porque los operandos de diferentes tipos son convertidos a números por el operador de igualdad ==. Una cadena vacía, al igual que false, se convierte en un cero.

¿Qué hacer si queremos diferenciar 0 de false?

Un operador de igualdad estricto === comprueba la igualdad sin conversión de tipo.

En otras palabras, si a y b son de diferentes tipos, entonces a === b retorna inmediatamente false sin intentar convertirlos.

Ejemplo:

alert( 0 === false ); // falso, porque los tipos son diferentes
Existe también un operador de “diferencia estricta” !== análogo a !=.

El operador de igualdad estricta es un poco más largo de escribir, pero hace obvio lo que está pasando y deja menos espacio a errores.


Algunas comparaciones:

5 > 4 → true
"apple" > "pineapple" → false
"2" > "12" → true
undefined == null → true
undefined === null → false
null == "\n0\n" → false
null === +"\n0\n" → false
Algunas de las razones:

[Solución]
Obviamente, true.
Comparación lexicográfica, por lo tanto false. "a" es menor que "p".
Una vez más, la comparación lexicográfica, el primer carácter de "2" es mayor que el primer carácter de "1".
Los valores null y undefined son iguales entre sí solamente.
La igualdad estricta es estricta. Diferentes tipos de ambos lados conducen a false.
Similar a (4), null solamente es igual a undefined.
Igualdad estricta de diferentes tipos.

-------------------------------------------------------------------------------------------------------------------------------------

Operador ternario ‘?’
A veces necesitamos que el valor que asignemos a una variable dependa de alguna condición.

Por ejemplo:

let accessAllowed;
let age = prompt('¿Qué edad tienes?', '');

if (age >= 18) {
  accessAllowed = true;
} else {
  accessAllowed = false;
}

alert(accessAllowed);
El “operador condicional” nos permite ejecutar esto en una forma más corta y simple.

El operador está representado por el signo de cierre de interrogación ?. A veces es llamado “ternario” porque el operador tiene tres operandos, es el único operador de JavaScript que tiene esa cantidad.

La Sintaxis es:

let result = condition ? value1 : value2;
Se evalúa condition: si es verdadera entonces devuelve value1 , de lo contrario value2.

Por ejemplo:

let accessAllowed = (age >= 18) ? true : false;
Técnicamente, podemos omitir el paréntesis alrededor de age > 18. El operador de signo de interrogación tiene una precedencia baja, por lo que se ejecuta después de la comparación >.

En este ejemplo realizaremos lo mismo que en el anterior:

// el operador de comparación  "age > 18" se ejecuta primero de cualquier forma
// (no necesitamos agregar los paréntesis)
let accessAllowed = age > 18 ? true : false;

Pero los paréntesis hacen el código mas legible, asi que recomendamos utilizarlos.

Múltiples ‘?’
Una secuencia de operadores de signos de interrogación ? puede devolver un valor que depende de más de una condición.

Por ejemplo:

let age = prompt('¿edad?');

let message = (age < 3) ? '¡Hola, bebé!' :
  (age < 18) ? '¡Hola!' :
  (age < 100) ? '¡Felicidades!' :
  '¡Qué edad tan inusual!';

alert( message );

--EJ: Reescribir un if-else como "?":

let message;

if (login == 'Empleado') {
  message = 'Hola';
} else if (login == 'Director') {
  message = 'Felicidades';
} else if (login == '') {
  message = 'Sin sesión';
} else {
  message = '';
} 


let message = (login == 'Empleado') ? 'Hola' : 
(login == 'Director') ? 'Felicidades' :
(login == '') ? 'Sin sesión' :
  '';

-------------------------------------------------------------------------------------------------------------------------------------

Operadores lógicos:

|| (OR)
El operador OR se representa con dos símbolos de linea vertical:

result = a || b;
En la programación clásica, el OR lógico esta pensado para manipular solo valores booleanos. Si cualquiera de sus argumentos es true, retorna true, de lo contrario retorna false.

En JavaScript, el operador es un poco más complicado y poderoso. Pero primero, veamos qué pasa con los valores booleanos.

Hay cuatro combinaciones lógicas posibles:

alert(true || true); // true (verdadero)
alert(false || true); // true
alert(true || false); // true
alert(false || false); // false (falso)

La mayoría de las veces, OR || es usado en una declaración if para probar si alguna de las condiciones dadas es true.

Por ejemplo:

let hour = 9;

if (hour < 10 || hour > 18) {
  alert( 'La oficina esta cerrada.' );
}

Podemos pasar mas condiciones:

let hour = 12;
let isWeekend = true;

if (hour < 10 || hour > 18 || isWeekend) {
  alert("La oficina esta cerrada."); // Es fin de semana
}

&& (AND)
El operador AND es representado con dos ampersands &&:

result = a && b;
En la programación clásica, AND retorna true si ambos operandos son valores verdaderos y false en cualquier otro caso.

alert(true && true); // true
alert(false && true); // false
alert(true && false); // false
alert(false && false); // false

Un ejemplo con if:

let hour = 12;
let minute = 30;

if (hour == 12 && minute == 30) {
  alert("La hora es 12:30");
}
Al igual que con OR, cualquier valor es permitido como operando de AND:

if (1 && 0) { // evaluado como true && false
  alert( "no funcionará porque el resultado es un valor falso" );
}
AND “&&” encuentra el primer valor falso
Dado múltiples valores aplicados al operador AND:

result = value1 && value2 && value3;

! (NOT)
El operador booleano NOT se representa con un signo de exclamación !.

La sintaxis es bastante simple:

result = !value;
El operador acepta un solo argumento y realiza lo siguiente:

Convierte el operando al tipo booleano: true/false.
Retorna el valor contrario.
Por ejemplo:

alert(!true); // false
alert(!0); // true
Un doble NOT !! es a veces usado para convertir un valor al tipo booleano:

alert(!!"cadena de texto no vacía"); // true
alert(!!null); // false
Eso es, el primer NOT convierte el valor a booleano y retorna el inverso, y el segundo NOT lo invierte de nuevo. Al final, tenemos una simple conversión a booleano.

Hay una manera un poco mas prolija de realizar lo mismo – una función integrada Boolean:

alert(Boolean("cadena de texto no vacía")); // true
alert(Boolean(null)); // false
La precedencia de NOT ! es la mayor de todos los operadores lógicos, así que siempre se ejecuta primero, antes que && o ||.

-------------------------------------------------------------------------------------------------------------------------------------
  
[Los operadores a nivel de bit sólo son importantes (deberían de memorizarlo) aquellos que se dediquen a programación de sistemas operativos, controladores de dispositivos, algoritmos de criptografía, etc. También son útiles en aplicaciones de alto rendimiento que requieren el procesamiento de grandes cantidades de datos, como en el procesamiento de señales digitales. En nuestro caso, a nivel de teoría es bueno conocerlos pero no es un requisito importante.]

Operadores a nivel de bit
Los operadores a nivel bit tratan los argumentos como números enteros de 32 bits y trabajan en el nivel de su representación binaria.

Estos operadores no son específicos de JavaScript. Son compatibles con la mayoría de los lenguajes de programación.

La lista de operadores:

AND ( & ) 
OR ( | )
XOR ( ^ ) 
NOT ( ~ ) 
LEFT SHIFT ( << ) 
RIGHT SHIFT ( >> ) 
ZERO-FILL RIGHT SHIFT ( >>> ) 

AND: El operador AND se representa con el símbolo "&" y devuelve verdadero (true) si ambos valores comparados son verdaderos. Por ejemplo, si tenemos la expresión "4 > 2 & 3 > 1", el resultado será verdadero ya que ambas comparaciones son verdaderas.

OR: El operador OR se representa con el símbolo "|" y devuelve verdadero si al menos uno de los valores comparados es verdadero. Por ejemplo, si tenemos la expresión "4 > 2 | 3 < 1", el resultado será verdadero ya que la primera comparación es verdadera.

XOR: El operador XOR se representa con el símbolo "^" y devuelve verdadero si solo uno de los valores comparados es verdadero, pero no ambos. Por ejemplo, si tenemos la expresión "4 > 2 ^ 3 > 1", el resultado será falso ya que ambas comparaciones son verdaderas.

NOT: El operador NOT se representa con el símbolo "~" y cambia el valor de verdadero a falso, y viceversa. Por ejemplo, si tenemos la expresión "(4 > 2)", el resultado será falso ya que la comparación original era verdadera.

LEFT SHIFT: El operador LEFT SHIFT se representa con el símbolo "<<" y desplaza los bits de un valor hacia la izquierda una cantidad determinada de veces. Por ejemplo, si tenemos la expresión "4 << 2", el resultado será 16 ya que el número binario 100 (4 en binario) desplazado dos veces a la izquierda se convierte en 10000 (16 en binario).

RIGHT SHIFT: El operador RIGHT SHIFT se representa con el símbolo ">>" y desplaza los bits de un valor hacia la derecha una cantidad determinada de veces. Por ejemplo, si tenemos la expresión "16 >> 2", el resultado será 4 ya que el número binario 10000 (16 en binario) desplazado dos veces a la derecha se convierte en 100 (4 en binario).

ZERO-FILL RIGHT SHIFT: El operador ZERO-FILL RIGHT SHIFT se representa con el símbolo ">>>" y desplaza los bits de un valor hacia la derecha una cantidad determinada de veces, llenando los bits vacíos a la izquierda con ceros. Por ejemplo, si tenemos la expresión "-16 >>> 2", el resultado será 1073741820 ya que el número binario 11111111111111111111111111110000 (-16 en binario con signo) desplazado dos veces a la derecha con el relleno de ceros a la izquierda se convierte en 00111111111111111111111111111100 (1073741820 en binario sin signo).

-------------------------------------------------------------------------------------------------------------------------------------

Operador Nullish Coalescing '??'

El operador “nullish coalescing” (fusión de null) se escribe con un doble signo de cierre de interrogación ??.

El resultado de a ?? b:

si a está “definida”, será a,
si a no está “definida”, será b.

Es decir, ?? devuelve el primer argumento cuando este no es null ni undefined. En caso contrario, devuelve el segundo.

El operador “nullish coalescing” no es algo completamente nuevo. Es solamente una sintaxis agradable para obtener el primer valor “definido” de entre dos.

Por ejemplo, aquí mostramos user si su valor está “definido” (que no es null ni undefined). De otro modo, muestra Anonymous:

let user;

alert(user ?? "Anonymous"); // Anonymous (user es undefined)
Aquí el ejemplo de user con un nombre asignado:

let user = "John";

alert(user ?? "Anonymous"); // John (user no es null ni undefined)

También podemos usar una secuencia de ?? para seleccionar el primer valor que no sea null/undefined de una lista.

let firstName = null;
let lastName = null;
let nickName = "Supercoder";

// Muestra el primer valor definido:
alert(firstName ?? lastName ?? nickName ?? "Anonymous"); // Supercoder

Si bien es cierto que el operador OR || estuvo en uso desde el origen de JavaScript, el operador Nullish llegó para satisfacer un problema que el operador OR no era capaz de resolver.

La gran diferencia es que:

|| devuelve el primer valor verdadero.
?? devuelve el primer valor definido.

El || no distingue entre false, 0, un string vacío "", y null/undefined. Todos son lo mismo: valores “falsos”. Si cualquiera de ellos es el primer argumento de ||, obtendremos el segundo argumento como resultado.

Pero en la práctica podemos querer usar el valor predeterminado solamente cuando la variable es null/undefined, es decir cuando el valor realmente es desconocido o no fue establecido.

Por ejemplo considera esto:

let height = 0; // altura cero

alert(height || 100); // 100
alert(height ?? 100); // 0
height || 100 verifica si height es “falso”, y 0 lo es. - así el resultado de || es el segundo argumento, 100. height ?? 100 verifica si height es null/undefined, y no lo es. - así el resultado es height como está, que es 0.

En la práctica, una altura cero es a menudo un valor válido que no debería ser reemplazado por un valor por defecto. En este caso ?? hace lo correcto.

La precedencia del operador ?? es la misma de ||. Ambos son iguales a 3
(según la tabla MDN: https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#Table)

Esto significa que ambos operadores, || y ??, son evaluados antes que = y ?, pero después de la mayoría de las demás 
operaciones como + y *.

Uso de ?? con && y ||
Por motivos de seguridad, JavaScript prohíbe el uso de ?? junto con los operadores && y ||, salvo que la precedencia sea explícitamente especificada con paréntesis.

El siguiente código desencadena un error de sintaxis:

let x = 1 && 2 ?? 3; // Syntax error
La limitación es debatible. Fue agregada a la especificación del lenguaje con propósito de evitar equivocaciones cuando la gente comenzara a reemplazar || por ??.

Usa paréntesis explícitos para solucionarlo:

let x = (1 && 2) ?? 3; // Funciona

alert(x); // 2

-------------------------------------------------------------------------------------------------------------------------------------

